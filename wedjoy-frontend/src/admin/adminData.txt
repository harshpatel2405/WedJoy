**Admin Dashboard Content and API Requirements**

## **1️⃣ Overview of Admin Dashboard**
The Admin Dashboard for WedJoy will provide a central hub for administrators to manage users, events, businesses, reports, and analytics. It will also include revenue tracking, content moderation, and platform settings.

---

## **2️⃣ Sections and Data Required**

### **🔹 Dashboard Overview**
- **Total Users** (Count of registered users)
- **Total Events** (Count of events hosted on platform)
- **Active Businesses** (Count of vendors or businesses listed)
- **Total Revenue** (Aggregated revenue from bookings and services)
- **Recent Events** (Latest events with name, date, organizer info)
- **User Growth Chart** (Graph showing user registrations over time)
- **Event Categories Distribution Chart** (Pie chart of events per category)

### **🔹 Manage Events**
- **List of Events** (Name, organizer, date, location, status)
- **Event Details** (Full event info with images, attendees, revenue)
- **Create/Edit/Delete Events** (CRUD operations for events)
- **Event Approval Workflow** (Approve or reject event listings)
- **Event Insights** (Attendee count, engagement stats, revenue from events)

### **🔹 Manage Businesses**
- **List of Vendors** (Business name, owner, category, rating, status)
- **Business Details** (Full profile, services, reviews, transaction history)
- **Approve/Reject Business Listings**
- **Revenue from Businesses** (Total earnings from vendor services)
- **Subscription Plans Management** (For premium vendor listings)

### **🔹 User Management**
- **List of Users** (Name, email, registration date, role, status)
- **User Profiles** (Detailed view of user activity and history)
- **Role Management** (Assign roles: Admin, Organizer, Vendor, User)
- **Ban/Unban Users**
- **User Engagement Metrics** (Active users, daily logins, retention rate)

### **🔹 Reports & Analytics**
- **Revenue Reports** (Daily, Monthly, Yearly earnings breakdown)
- **Event Performance Analytics** (Tickets sold, engagement levels, popularity)
- **User Activity Reports** (Login patterns, most active users, demographics)
- **Business Insights** (Top-performing vendors, high-rated businesses)

### **🔹 Content Moderation**
- **Reported Content** (List of flagged events, reviews, comments)
- **Approve/Remove Content** (Manage inappropriate content on platform)
- **Automated Moderation Alerts** (AI-based detection for offensive content)

### **🔹 Settings & Configuration**
- **Admin Profile Settings**
- **Payment Gateway Settings**
- **Notification Settings**
- **API Access & Security Settings**
- **Platform-Wide Configurations**

---

## **3️⃣ Required API Endpoints**

### **🔹 Dashboard APIs**
1. `/api/admin/users/stats` - Get total users count
2. `/api/admin/events/stats` - Get total events count
3. `/api/admin/businesses/stats` - Get total businesses count
4. `/api/admin/revenue/stats` - Get total revenue
5. `/api/admin/events/recent` - Get recent events list
6. `/api/admin/users/growth` - Get user growth data for charts
7. `/api/admin/events/categories` - Get event category distribution for pie chart

### **🔹 Event Management APIs**
8. `/api/admin/events` - Get all events
9. `/api/admin/event/{id}` - Get single event details
10. `/api/admin/event/create` - Create new event
11. `/api/admin/event/update/{id}` - Update event details
12. `/api/admin/event/delete/{id}` - Delete an event
13. `/api/admin/event/approve/{id}` - Approve event

### **🔹 Business Management APIs**
14. `/api/admin/businesses` - Get all businesses
15. `/api/admin/business/{id}` - Get business details
16. `/api/admin/business/approve/{id}` - Approve business listing
17. `/api/admin/business/reject/{id}` - Reject business listing
18. `/api/admin/business/revenue` - Get revenue from businesses

### **🔹 User Management APIs**
19. `/api/admin/users` - Get all users
20. `/api/admin/user/{id}` - Get user details
21. `/api/admin/user/ban/{id}` - Ban user
22. `/api/admin/user/unban/{id}` - Unban user
23. `/api/admin/user/roles` - Manage user roles

### **🔹 Reports & Analytics APIs**
24. `/api/admin/revenue/reports` - Get revenue breakdown
25. `/api/admin/events/analytics` - Get event performance analytics
26. `/api/admin/users/activity` - Get user activity reports

### **🔹 Content Moderation APIs**
27. `/api/admin/content/reports` - Get flagged content list
28. `/api/admin/content/remove/{id}` - Remove flagged content

### **🔹 Settings APIs**
29. `/api/admin/settings` - Get platform settings
30. `/api/admin/settings/update` - Update platform settings

---

## **4️⃣ Summary**
### **📌 Content Summary**
- **7 Core Sections** (Dashboard, Events, Businesses, Users, Reports, Moderation, Settings)
- **40+ Different Data Points** displayed across the dashboard
- **Charts & Graphs** (User growth, revenue trends, event category distribution)

### **📌 API Summary**
- **30+ API Endpoints** covering all admin functionalities
- **CRUD Operations** for events, businesses, and users
- **Reports & Analytics APIs** for revenue tracking and platform insights

🚀 This structured approach ensures the **Admin Dashboard is feature-rich, scalable, and efficient.** Let me know if you need modifications!



//User Managemnet.jsx
import React, { useState, useEffect } from 'react';
import { 
  Users, 
  UserCheck, 
  UserX, 
  Shield, 
  Lock, 
  Unlock, 
  BarChart2, 
  Filter, 
  Search,
  MoreVertical,
  ChevronDown,
  ChevronUp
} from 'lucide-react';

// Mock user data with more detailed information
const mockUsers = [
  {
    id: 1,
    name: "John Doe",
    email: "john.doe@example.com",
    avatar: "/api/placeholder/200/200",
    registrationDate: "2024-01-15",
    role: "Business Owner",
    status: "Active",
    loginCount: 45,
    lastLogin: "2025-03-01T10:30:00Z",
    performanceScore: 85,
    eventOrganized: 12,
    totalRevenue: 125000
  },
  {
    id: 2,
    name: "Jane Smith",
    email: "jane.smith@example.com", 
    avatar: "/api/placeholder/200/200",
    registrationDate: "2024-02-20",
    role: "Event Organizer",
    status: "Banned",
    loginCount: 12,
    lastLogin: "2025-02-15T14:45:00Z",
    performanceScore: 65,
    eventOrganized: 5,
    totalRevenue: 45000
  },
  {
    id: 3,
    name: "Mike Johnson",
    email: "mike.johnson@example.com",
    avatar: "/api/placeholder/200/200",
    registrationDate: "2024-03-10",
    role: "Community Member",
    status: "Pending",
    loginCount: 5,
    lastLogin: "2025-01-22T09:15:00Z",
    performanceScore: 45,
    eventOrganized: 2,
    totalRevenue: 15000
  }
];

const User_Management = () => {
  const [users, setUsers] = useState(mockUsers);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isUserDetailsModalOpen, setIsUserDetailsModalOpen] = useState(false);
  const [filter, setFilter] = useState('All');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ 
    key: 'registrationDate', 
    direction: 'desc' 
  });

  // Roles for filtering
  const roles = [
    'All',
    'Admin', 
    'Event Organizer', 
    'Business Owner', 
    'Community Member'
  ];

  // Sorting function
  const sortedUsers = React.useMemo(() => {
    let sortableUsers = [...users];
    if (sortConfig.key) {
      sortableUsers.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableUsers;
  }, [users, sortConfig]);

  // Filtered and searched users
  const filteredUsers = sortedUsers.filter(user => {
    const matchesFilter = filter === 'All' || user.role === filter;
    const matchesSearch = 
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
      user.email.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  // Status color mapping
  const statusColors = {
    'Active': 'bg-green-100 text-green-800',
    'Banned': 'bg-red-100 text-red-800',
    'Pending': 'bg-yellow-100 text-yellow-800'
  };

  // User Actions
  const handleViewUserDetails = (user) => {
    setSelectedUser(user);
    setIsUserDetailsModalOpen(true);
  };

  // Sorting handler
  const handleSort = (key) => {
    setSortConfig(prevSort => ({
      key,
      direction: prevSort.key === key && prevSort.direction === 'desc' 
        ? 'asc' 
        : 'desc'
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="container mx-auto max-w-7xl">
        {/* Header */}
        <div className="mb-6 flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-800 flex items-center">
            <Users className="mr-3 text-blue-600" size={32} /> 
            User Management
          </h1>

          {/* Search and Filter Container */}
          <div className="flex flex-col md:flex-row w-full md:w-auto space-y-2 md:space-y-0 md:space-x-2">
            {/* Role Filter */}
            <div className="relative w-full md:w-auto">
              <select 
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                className="w-full md:w-auto px-4 py-2 border border-gray-300 rounded-lg appearance-none bg-white text-gray-700"
              >
                {roles.map(role => (
                  <option key={role} value={role}>{role}</option>
                ))}
              </select>
              <ChevronDown className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
            </div>

            {/* Search Input */}
            <div className="relative w-full md:w-64">
              <input 
                type="text"
                placeholder="Search users..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
            </div>
          </div>
        </div>

        {/* User List - Responsive Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredUsers.map((user) => (
            <div 
              key={user.id} 
              className="bg-white shadow-md rounded-lg p-4 hover:shadow-lg transition-shadow"
            >
              <div className="flex items-center mb-4">
                <img 
                  src={user.avatar} 
                  alt={user.name} 
                  className="w-16 h-16 rounded-full mr-4 object-cover"
                />
                <div>
                  <h3 className="font-bold text-lg">{user.name}</h3>
                  <p className="text-gray-500 text-sm">{user.email}</p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-2 mb-4">
                <div>
                  <p className="text-xs text-gray-600">Role</p>
                  <p className="font-semibold">{user.role}</p>
                </div>
                <div>
                  <p className="text-xs text-gray-600">Status</p>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[user.status]}`}>
                    {user.status}
                  </span>
                </div>
              </div>

              <div className="flex justify-between items-center">
                <button 
                  onClick={() => handleViewUserDetails(user)}
                  className="text-blue-600 hover:bg-blue-50 px-3 py-1 rounded-md transition"
                >
                  View Details
                </button>
                <div className="flex space-x-2">
                  <button 
                    className="text-green-600 hover:bg-green-50 p-2 rounded-full"
                    title="Edit User"
                  >
                    <UserCheck size={18} />
                  </button>
                  <button 
                    className="text-red-600 hover:bg-red-50 p-2 rounded-full"
                    title="Ban User"
                  >
                    <Lock size={18} />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* No Users Found */}
        {filteredUsers.length === 0 && (
          <div className="text-center py-12 bg-white rounded-lg shadow-md">
            <Users className="mx-auto mb-4 text-gray-400" size={48} />
            <p className="text-gray-600">No users found matching your criteria</p>
          </div>
        )}
      </div>

      {/* User Details Modal */}
      {isUserDetailsModalOpen && selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b flex items-center justify-between">
              <h2 className="text-xl font-bold flex items-center">
                <Shield className="mr-2 text-blue-600" /> User Profile
              </h2>
              <button 
                onClick={() => setIsUserDetailsModalOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <UserX size={24} />
              </button>
            </div>

            <div className="p-6 space-y-4">
              <div className="flex items-center space-x-4">
                <img 
                  src={selectedUser.avatar} 
                  alt={selectedUser.name} 
                  className="w-24 h-24 rounded-full object-cover"
                />
                <div>
                  <h3 className="text-xl font-bold">{selectedUser.name}</h3>
                  <p className="text-gray-600">{selectedUser.email}</p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-xs text-gray-600">Role</p>
                  <p className="font-semibold">{selectedUser.role}</p>
                </div>
                <div>
                  <p className="text-xs text-gray-600">Registration</p>
                  <p>{selectedUser.registrationDate}</p>
                </div>
              </div>

              <div className="bg-gray-100 rounded-lg p-4">
                <h4 className="font-semibold mb-2 flex items-center">
                  <BarChart2 className="mr-2 text-blue-600" /> Performance Metrics
                </h4>
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <p className="text-xs text-gray-600">Login Count</p>
                    <p className="font-bold">{selectedUser.loginCount}</p>
                  </div>
                  <div>
                    <p className="text-xs text-gray-600">Events Organized</p>
                    <p className="font-bold">{selectedUser.eventOrganized}</p>
                  </div>
                  <div>
                    <p className="text-xs text-gray-600">Total Revenue</p>
                    <p className="font-bold">${selectedUser.totalRevenue.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-xs text-gray-600">Performance Score</p>
                    <p className="font-bold">{selectedUser.performanceScore}/100</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default User_Management;